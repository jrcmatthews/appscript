/*
  Provides the capability of exporting the active sheet or all sheets as JSON object (also Python object syntax compatible).
  Only functions properly if the sheet is arranged as a database (column headers and row data)
*/
var FORMAT_ONELINE   = 'One-line';
var FORMAT_MULTILINE = 'Multi-line';
var FORMAT_PRETTY    = 'Pretty';

var LANGUAGE_JS      = 'JavaScript';
var LANGUAGE_PYTHON  = 'Python';

var STRUCTURE_LIST = 'List';
var STRUCTURE_HASH = 'Hash (keyed by "id" column)';

/* Defaults for this particular spreadsheet, change as desired */
var DEFAULT_FORMAT = FORMAT_PRETTY;
var DEFAULT_LANGUAGE = LANGUAGE_JS;
var DEFAULT_STRUCTURE = STRUCTURE_LIST;


function exportAllSheets(e) {
  let ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheets = ss.getSheets();
  let sheetsData = {};
  for (let i = 0; i < sheets.length; i++) {
    let sheet = sheets[i];
    let sheetName = sheet.getName(); 
    if (sheet.getFrozenRows() > 0)  {
      SpreadsheetApp.getActive().toast(sheetName, "Parsing");
      let rowsData = getRowsData_(sheet, getExportOptions(e));
      sheetsData[sheetName] = rowsData;
    } else {
      SpreadsheetApp.getActive().toast(sheetName,"SKIPPING, NO HEADERS");
    }
  }
  let json = makeJSON_(sheetsData, getExportOptions(e));
  displayText_(json);
}

function exportSheet(e) {
  let ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getActiveSheet();
  let rowsData = getRowsData_(sheet, getExportOptions(e));
  let json = makeJSON_(rowsData, getExportOptions(e));
  displayText_(json);
}
  
function getExportOptions(e) {
  let options = {};
  
  options.language = e && e.parameter.language || DEFAULT_LANGUAGE;
  options.format   = e && e.parameter.format || DEFAULT_FORMAT;
  options.structure = e && e.parameter.structure || DEFAULT_STRUCTURE;
  
  var cache = CacheService.getPublicCache();
  cache.put('language', options.language);
  cache.put('format',   options.format);
  cache.put('structure',   options.structure);
  
  Logger.log(options);
  return options;
}

function makeJSON_(object, options) {
  if (options.format == FORMAT_PRETTY) {
    var jsonString = JSON.stringify(object, null, 4);
  } else if (options.format == FORMAT_MULTILINE) {
    var jsonString = Utilities.jsonStringify(object);
    jsonString = jsonString.replace(/},/gi, '},\n');
    jsonString = prettyJSON.replace(/":\[{"/gi, '":\n[{"');
    jsonString = prettyJSON.replace(/}\],/gi, '}],\n');
  } else {
    var jsonString = Utilities.jsonStringify(object);
  }
  if (options.language == LANGUAGE_PYTHON) {
    // add unicode markers
    jsonString = jsonString.replace(/"([a-zA-Z]*)":\s+"/gi, '"$1": u"');
  }
  return jsonString;
}

/** Popup a modal dialog with the JSON contents
 * @param {Text} - HTML formatted text to display
 * 
*/
function displayText_(text) {
  let output = HtmlService.createHtmlOutput("<textarea style='width:100%;' rows='20'>" + text + "</textarea>");
  output.setWidth(600)
  output.setHeight(350);
  SpreadsheetApp.getUi()
      .showModalDialog(output, 'Exported JSON');
}

/** Creates JS objects for each row of data in the sheet
 * @param {Object} - a Google Sheet object
 * @param {Object} - the options to use in formatting the objects
 * @return {Array} - an Array containing stringified data indexed by its normalized column name
 */
function getRowsData_(sheet, options) {
  let headersRange = sheet.getRange(1, 1, sheet.getFrozenRows(), sheet.getMaxColumns());
  let headers = headersRange.getValues()[0];
  let dataRange = sheet.getRange(sheet.getFrozenRows()+1, 1, sheet.getMaxRows(), sheet.getMaxColumns());
  let objects = getObjects_(dataRange.getDisplayValues(), normalizeHeaders_(headers));
  if (options.structure == STRUCTURE_HASH) {
    let objectsById = {};
    objects.forEach(function(object) {
      objectsById[object.id] = object;
    });
    return objectsById;
  } else {
    return objects;
  }
}

/** Creates JS objects for each column by column of data in the sheet
 * @param {Object} - a Google Sheet object
 * @param {Object} - a Google Sheet Range object
 * @param {Number} - the column number where the row names are stored
 * @return {Array} - an Array containing stringified data indexed by its normalized row name
 */
function getColumnsData_(sheet, range, rowHeadersColumnIndex) {
  rowHeadersColumnIndex = rowHeadersColumnIndex || range.getColumnIndex() - 1;
  let headersTmp = sheet.getRange(range.getRow(), rowHeadersColumnIndex, range.getNumRows(), 1).getValues();
  let headers = normalizeHeaders_(arrayTranspose_(headersTmp)[0]);
  return getObjects(arrayTranspose_(range.getValues()), headers);
}


/** Creates JS objects based on a row of data
* @param {Array} - a 2D JS Array of data to convert
* @return {Array} - Array of Strings defining the property names for the JS objects to create
*/
function getObjects_(data, keys) {
  let objects = [];
  for (let i = 0; i < data.length; ++i) {
    let object = {};
    let hasData = false;
    for (let j = 0; j < data[i].length; ++j) {
      let cellData = data[i][j];
      if (isCellEmpty_(cellData)) {
        continue;
      }
      object[keys[j]] = cellData;
      hasData = true;
    }
    if (hasData) {
      objects.push(object);
    }
  }
  return objects;
}

/** Converts an Array of Strings to JS object property names
 * @param {Array} - an array of column headers to convert
 * @return {Array} - an array of column headers converted to JS object property names
 */
function normalizeHeaders_(headers) {
  let keys = [];
  for (let i = 0; i < headers.length; ++i) {
    let key = normalizeHeader_(headers[i]);
    if (key.length > 0) {
      keys.push(key);
    }
  }
  return keys;
}

/** Converts a String into an approximation of a JS object property name
 *  Leading numbers are ignored.  Results are mixed case starting with lowercase.
 *  @param {String} - the column header from the sheet to convert
 *  @return {String} - the column header as a JS object property name.
 *  Examples:
 *    "First Name" == "firstName"
 *    "Market Cap (millions)" == "marketCapMillions"
 *    "1 number at beginning" == "numberAtBeginning"
 */
function normalizeHeader_(header) {
  let key = "";
  let upperCase = false;
  for (let i = 0; i < header.length; ++i) {
    let letter = header[i];
    if (letter == " " && key.length > 0) {
      upperCase = true;
      continue;
    }
    if (!isAlnum_(letter)) {
      continue;
    }
    if (key.length == 0 && isDigit_(letter)) {
      continue; // first character must be a letter
    }
    if (upperCase) {
      upperCase = false;
      key += letter.toUpperCase();
    } else {
      key += letter.toLowerCase();
    }
  }
  return key;
}

/** Returns TRUE if cell was empty
 * @params {String} - the contents of a cell in the sheet
 * @return {Boolean} - TRUE if cell contents was empty, FALSE if not.
 */
function isCellEmpty_(cellData) {
  return typeof(cellData) == "string" && cellData == "";
}

/** Returns TRUE if the parameter is alphanumeric, otherwise FALSE
 * @param {String} - the single ASCII character to check
 * @return {Boolean} - TRUE if alphanumeric, FALSE if not. 
 */
function isAlnum_(char) {
  return char >= 'A' && char <= 'Z' ||
    char >= 'a' && char <= 'z' ||
    isDigit_(char);
}

/** Returns TRUE if the parameter is a digit, otherwise FALSE
 * @param {String} - the single ASCII character to check
 * @return {Boolean} - TRUE if a digit, FALSE if not.
 */
function isDigit_(char) {
  return char >= '0' && char <= '9';
}

/** Given a JS 2d Array, return the transposed table
 * @param {Array} data - the JS 2d Array
 * @return {Array} - the 'data' transposed
 * Example: arrayTranspose([1,2,3],[4,5,6]) returns [[1,4],[2,5],[3,6]]
 */
function arrayTranspose_(data) {
  if (data.length == 0 || data[0].length == 0) {
    return null;
  }

  let ret = [];
  for (let i = 0; i < data[0].length; ++i) {
    ret.push([]);
  }

  for (let i = 0; i < data.length; ++i) {
    for (let j = 0; j < data[i].length; ++j) {
      ret[j][i] = data[i][j];
    }
  }

  return ret;
}
